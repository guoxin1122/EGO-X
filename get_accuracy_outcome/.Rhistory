score(net32_directed, complete_data, type="bde")
score(net32_directed, complete_data, type="bds")
score(net32_directed, complete_data, type="mbde")
View(nhl_data)
nhl_data[1,]
names(nhl_data)
score(net31, complete_data, type="loglik")
#calculate marginal probability
net31_fitted = bn.fit(net31, complete_data)
net31_grain<-as.grain(net31_fitted)
net31_marg<-querygrain(net31_grain,type="marginal")
net31_df<-data.frame(unlist(net31_marg))
write.csv(net31_df,file="~/Downloads/BNA2/net31_hc_df.csv")
score(net32_directed, complete_data, type="loglik")
#calculate marginal probability
net32_fitted = bn.fit(net32_directed, complete_data)
net32_grain = as.grain(net32_fitted)
net32_marg = querygrain(net32_grain,type="marginal")
net32_df = data.frame(unlist(net32_marg))
write.csv(net32_df,file="~/Downloads/BNA2/net32_gs_df.csv")
?impute
complete_data = nhl_data
set.seed(311)
for (j in 1:length(nhl_data[1,])) {
complete_data[,j] = impute(nhl_data[,j], fun=random) # default methods is median
complete_data[,j] = factor(complete_data[,j])}
###### measure the quality of hc #####
net31 = hc(complete_data)
graphviz.plot(net31, main = "the learnt BN for nhl dataset using hc algorithm")
score(net31, complete_data, type="loglik")
set.seed(311)
for (j in 1:length(nhl_data[1,])) {
complete_data[,j] = impute(nhl_data[,j], fun="random") # default methods is median
complete_data[,j] = factor(complete_data[,j])}
###### measure the quality of hc #####
net31 = hc(complete_data)
graphviz.plot(net31, main = "the learnt BN for nhl dataset using hc algorithm")
score(net31, complete_data, type="loglik")
set.seed(311)
for (j in 1:length(nhl_data[1,])) {
complete_data[,j] = impute(nhl_data[,j], fun="random") # default methods is median
complete_data[,j] = factor(complete_data[,j])}
###### measure the quality of hc #####
net31 = hc(complete_data)
graphviz.plot(net31, main = "the learnt BN for nhl dataset using hc algorithm")
score(net31, complete_data, type="loglik")
complete_data = nhl_data
set.seed(311)
for (j in 1:length(nhl_data[1,])) {
complete_data[,j] = impute(nhl_data[,j], fun="mean") # default methods is median
complete_data[,j] = factor(complete_data[,j])}
net31 = hc(complete_data)
graphviz.plot(net31, main = "the learnt BN for nhl dataset using hc algorithm")
score(net31, complete_data, type="loglik")
View(complete_data)
complete_data = nhl_data
set.seed(311)
for (j in 1:length(nhl_data[1,])) {
complete_data[,j] = impute(nhl_data[,j], fun="median") # default methods is median
complete_data[,j] = factor(complete_data[,j])}
###### measure the quality of hc #####
net31 = hc(complete_data)
graphviz.plot(net31, main = "the learnt BN for nhl dataset using hc algorithm")
score(net31, complete_data, type="loglik")
View(complete_data)
nhl_data = read.csv("~/Downloads/R/nhl.csv")
# preprocessing nhl dataset: discretisation and impute
complete_data = nhl_data
set.seed(311)
for (j in 1:length(nhl_data[1,])) {
complete_data[,j] = impute(nhl_data[,j], median) # default methods is median
complete_data[,j] = factor(complete_data[,j])}
###### measure the quality of hc #####
net31 = hc(complete_data)
graphviz.plot(net31, main = "the learnt BN for nhl dataset using hc algorithm")
score(net31, complete_data, type="loglik")
View(complete_data)
complete_data = nhl_data
set.seed(311)
for (j in 1:length(nhl_data[1,])) {
complete_data[,j] = impute(nhl_data[,j], median) # default methods is median
complete_data[,j] = factor(complete_data[,j])}
net31 = hc(complete_data)
graphviz.plot(net31, main = "the learnt BN for nhl dataset using hc algorithm")
score(net31, complete_data, type="loglik")
# -1281.002
View(complete_data)
complete_data = nhl_data
set.seed(311)
for (j in 1:length(nhl_data[1,])) {
complete_data[,j] = impute(nhl_data[,j], random) # default methods is median
complete_data[,j] = factor(complete_data[,j])}
###### measure the quality of hc #####
net31 = hc(complete_data)
graphviz.plot(net31, main = "the learnt BN for nhl dataset using hc algorithm")
score(net31, complete_data, type="loglik")
nhl_data = read.csv("~/Downloads/R/nhl.csv")
# preprocessing nhl dataset: discretisation and impute
complete_data = nhl_data
set.seed(311)
for (j in 1:length(nhl_data[1,])) {
complete_data[,j] = impute(nhl_data[,j], mean) # default methods is median
complete_data[,j] = factor(complete_data[,j])}
###### measure the quality of hc #####
net31 = hc(complete_data)
graphviz.plot(net31, main = "the learnt BN for nhl dataset using hc algorithm")
score(net31, complete_data, type="loglik")
nhl_data = read.csv("~/Downloads/R/nhl.csv")
# preprocessing nhl dataset: discretisation and impute
complete_data = nhl_data
set.seed(311)
for (j in 1:length(nhl_data[1,])) {
complete_data[,j] = impute(nhl_data[,j], fun="random") # default methods is median
complete_data[,j] = factor(complete_data[,j])}
###### measure the quality of hc #####
net31 = hc(complete_data)
graphviz.plot(net31, main = "the learnt BN for nhl dataset using hc algorithm")
score(net31, complete_data, type="loglik")
nhl_data = read.csv("~/Downloads/R/nhl.csv")
# preprocessing nhl dataset: discretisation and impute
complete_data = nhl_data
set.seed(311)
for (j in 1:length(nhl_data[1,])) {
complete_data[,j] = impute(nhl_data[,j], mean) # default methods is median
complete_data[,j] = factor(complete_data[,j])}
###### measure the quality of hc #####
net31 = hc(complete_data)
graphviz.plot(net31, main = "the learnt BN for nhl dataset using hc algorithm")
score(net31, complete_data, type="loglik")
View(complete_data)
write.csv(net31_df,file="~/Downloads/BNA2/net31_hc_df.csv")
write.csv(net32_df,file="~/Downloads/BNA2/net32_gs_df.csv")
##----- the manually constructed Bayesian network for breast cancer diagnosis  ------###
bcnet = read.net("~/Downloads/BNA2/bc.net")
net43 = bn.net(bcnet)
names(bc_data)(net43)
fitted43 = bn.fit(net43, bc_data)
# fitted
score(net43, bc_data, type="loglik")
library(grid)
library(Rgraphviz)
library(gRbase)
library(gRain)
library(bnlearn)
library(caTools)
library(Hmisc)
graph.par(list(nodes=list(fontsize="45")))
bc_data = read.csv("~/Downloads/R/bc.csv")
##----- the manually constructed Bayesian network for breast cancer diagnosis  ------###
bcnet = read.net("~/Downloads/BNA2/bc.net")
net43 = bn.net(bcnet)
names(bc_data)(net43)
fitted43 = bn.fit(net43, bc_data)
# fitted
score(net43, bc_data, type="loglik")
#-180948.8
##----- the manually constructed Bayesian network for breast cancer diagnosis  ------###
bcnet = read.net("~/Downloads/BNA2/bc.net")
net43 = bn.net(bcnet)
#names(bc_data)(net43)
fitted43 = bn.fit(net43, bc_data)
# fitted
score(net43, bc_data, type="loglik")
#-180948.8
##----- the manually constructed Bayesian network for breast cancer diagnosis  ------###
bcnet = read.net("~/Downloads/BNA2/bc.net")
net43 = bn.net(bcnet)
graphviz.plot(net43, main = "manully")
fitted43 = bn.fit(net43, bc_data)
# fitted
score(net43, bc_data, type="loglik")
library(grid)
library(Rgraphviz)
library(gRbase)
library(gRain)
library(bnlearn)
library(caTools)
library(Hmisc)
graph.par(list(nodes=list(fontsize="45")))
bc_data = read.csv("~/Downloads/R/bc.csv")
#--------- the learnt Bayesian network using hc algorithm ------------#
net41 = hc(bc_data)
graphviz.plot(net41, main = "BN of bc dataset using hc algorithm")
fitted = bn.fit(net41, bc_data)
score(net41, bc_data, type="loglik")
# score 181018.1
#------------- gs ------------#
net42 = gs(bc_data)
graphviz.plot(net42, main = "BN of bc dataset using gs algorithm")
fitted = bn.fit(net42, bc_data)
score(net42, bc_data, type="loglik")
#####------------- naive Bayesian networks ------########
netnb = naive.bayes(bc_data, "BC", names(bc_data)[c(1:3,5:16)])
score(netnb, bc_data, type="loglik")
graphviz.plot(netnb)
netbc_cv = bn.cv(bc_data, netnb, loss = "pred", k = 3,
loss.args = list(target="BC"), debug = TRUE)
bcnetcvfit1 = as.grain(netbc_cv[[1]]$fitted)
bc_test1 = bc_data[netbc_cv[[1]]$test, ]
# Compute posterior probabilities P(response | predictors) for the k-th subset
pred_test1_bc = predict(bcnetcvfit1, response = c("BC"), newdata = bc_test1,
predictors = names(bc_test1)[-4], type = "class")
bcnetcvfit2 = as.grain(netbc_cv[[2]]$fitted)
bc_test2 = bc_data[netbc_cv[[2]]$test, ]
pred_test2_bc = predict(bcnetcvfit2, response = c("BC"), newdata = bc_test2,
predictors = names(bc_test2)[-4], type = "class")
bcnetcvfit3 = as.grain(netbc_cv[[3]]$fitted)
bc_test3 = bc_data[netbc_cv[[3]]$test, ]
pred_test3_bc = predict(bcnetcvfit3, response = c("BC"), newdata = bc_test3,
predictors = names(bc_test3)[-4], type = "class")
###### ROC analysis ############
bc_test = rbind(bc_test1,bc_test2,bc_test3)
pred_test_bc = data.frame(c(pred_test1_bc$pEvidence, pred_test2_bc$pEvidence,
pred_test3_bc$pEvidence))
colAUC(pred_test_bc, bc_test[ ,4], plotROC = TRUE)
##----- the manually constructed Bayesian network for breast cancer diagnosis  ------###
bcnet = read.net("~/Downloads/BNA2/bc.net")
net43 = bn.net(bcnet)
graphviz.plot(net43, main = "manully")
fitted43 = bn.fit(net43, bc_data)
# fitted
score(net43, bc_data, type="loglik")
#-180948.8
#------------- gs ------------#
net42 = gs(bc_data)
net42_directed = cextend(net42)
graphviz.plot(net42_directed, main = "BN of bc dataset using gs algorithm")
fitted = bn.fit(net42_directed, bc_data)
score(net42_directed, bc_data, type="loglik")
library(grid)
library(Rgraphviz)
library(gRbase)
library(gRain)
library(bnlearn)
library(caTools)
library(Hmisc)
graph.par(list(nodes=list(fontsize="45")))
bc_data = read.csv("~/Downloads/R/bc.csv")
#--------- the learnt Bayesian network using hc algorithm ------------#
net41 = hc(bc_data)
graphviz.plot(net41, main = "BN of bc dataset using hc algorithm")
fitted = bn.fit(net41, bc_data)
score(net41, bc_data, type="loglik")
# score 181018.1
#------------- gs ------------#
net42 = gs(bc_data)
net42_directed = cextend(net42)
graphviz.plot(net42_directed, main = "BN of bc dataset using gs algorithm")
fitted = bn.fit(net42_directed, bc_data)
score(net42_directed, bc_data, type="loglik")
#####------------- naive Bayesian networks ------########
netnb = naive.bayes(bc_data, "BC", names(bc_data)[c(1:3,5:16)])
score(netnb, bc_data, type="loglik")
graphviz.plot(netnb)
netbc_cv = bn.cv(bc_data, netnb, loss = "pred", k = 5,
loss.args = list(target="BC"), debug = TRUE)
bcnetcvfit1 = as.grain(netbc_cv[[1]]$fitted)
bc_test1 = bc_data[netbc_cv[[1]]$test, ]
# Compute posterior probabilities P(response | predictors) for the k-th subset
pred_test1_bc = predict(bcnetcvfit1, response = c("BC"), newdata = bc_test1,
predictors = names(bc_test1)[-4], type = "class")
bcnetcvfit2 = as.grain(netbc_cv[[2]]$fitted)
bc_test2 = bc_data[netbc_cv[[2]]$test, ]
pred_test2_bc = predict(bcnetcvfit2, response = c("BC"), newdata = bc_test2,
predictors = names(bc_test2)[-4], type = "class")
bcnetcvfit3 = as.grain(netbc_cv[[3]]$fitted)
bc_test3 = bc_data[netbc_cv[[3]]$test, ]
pred_test3_bc = predict(bcnetcvfit3, response = c("BC"), newdata = bc_test3,
predictors = names(bc_test3)[-4], type = "class")
###### ROC analysis ############
bc_test = rbind(bc_test1,bc_test2,bc_test3)
pred_test_bc = data.frame(c(pred_test1_bc$pEvidence, pred_test2_bc$pEvidence,
pred_test3_bc$pEvidence))
colAUC(pred_test_bc, bc_test[ ,4], plotROC = TRUE)
##----- the manually constructed Bayesian network for breast cancer diagnosis  ------###
bcnet = read.net("~/Downloads/BNA2/bc.net")
net43 = bn.net(bcnet)
graphviz.plot(net43, main = "manully")
fitted43 = bn.fit(net43, bc_data)
# fitted
score(net43, bc_data, type="loglik")
#-180948.8
###### cross validation #########
bcnetcvfit1 = as.grain(netbc_cv[[1]]$fitted)
bc_test1 = bc_data[netbc_cv[[1]]$test, ]
# Compute posterior probabilities P(response | predictors) for the k-th subset
pred_test1_bc = predict(bcnetcvfit1, response = c("BC"), newdata = bc_test1,
predictors = names(bc_test1)[-4], type = "class")
bcnetcvfit2 = as.grain(netbc_cv[[2]]$fitted)
bc_test2 = bc_data[netbc_cv[[2]]$test, ]
pred_test2_bc = predict(bcnetcvfit2, response = c("BC"), newdata = bc_test2,
predictors = names(bc_test2)[-4], type = "class")
bcnetcvfit3 = as.grain(netbc_cv[[3]]$fitted)
bc_test3 = bc_data[netbc_cv[[3]]$test, ]
pred_test3_bc = predict(bcnetcvfit3, response = c("BC"), newdata = bc_test3,
predictors = names(bc_test3)[-4], type = "class")
bcnetcvfit4 = as.grain(netbc_cv[[4]]$fitted)
bc_test4 = bc_data[netbc_cv[[4]]$test, ]
pred_test4_bc = predict(bcnetcvfit4, response = c("BC"), newdata = bc_test4,
predictors = names(bc_test4)[-4], type = "class")
bcnetcvfit5 = as.grain(netbc_cv[[5]]$fitted)
bc_test5 = bc_data[netbc_cv[[5]]$test, ]
pred_test5_bc = predict(bcnetcvfit5, response = c("BC"), newdata = bc_test5,
predictors = names(bc_test5)[-4], type = "class")
netnb = naive.bayes(bc_data, "BC", names(bc_data)[c(1:3,5:16)])
score(netnb, bc_data, type="loglik")
graphviz.plot(netnb)
netbc_cv = bn.cv(bc_data, netnb, loss = "pred", k = 5,
loss.args = list(target="BC"), debug = TRUE)
pred_test1_bc
bc_test = rbind(bc_test1,bc_test2,bc_test3,bc_test4,bc_test5)
pred_test_bc = data.frame(c(pred_test1_bc$pEvidence, pred_test2_bc$pEvidence,
pred_test3_bc$pEvidence,pred_test4_bc$pEvidence,pred_test5_bc$pEvidence))
colAUC(pred_test_bc, bc_test[ ,4], plotROC = TRUE)
library(grid)
library(Rgraphviz)
library(gRbase)
library(gRain)
library(bnlearn)
library(caTools)
library(Hmisc)
graph.par(list(nodes=list(fontsize="45")))
bc_data = read.csv("~/Downloads/R/bc.csv")
#--------- the learnt Bayesian network using hc algorithm ------------#
net41 = hc(bc_data)
graphviz.plot(net41, main = "BN of bc dataset using hc algorithm")
fitted = bn.fit(net41, bc_data)
score(net41, bc_data, type="loglik")
# score 181018.1
#------------- gs ------------#
net42 = gs(bc_data)
net42_directed = cextend(net42)
graphviz.plot(net42_directed, main = "BN of bc dataset using gs algorithm")
fitted = bn.fit(net42_directed, bc_data)
score(net42_directed, bc_data, type="loglik")
###### cross validation #####
netnb = naive.bayes(bc_data, "BC", names(bc_data)[c(1:3,5:16)])
score(netnb, bc_data, type="loglik")
graphviz.plot(netnb)
netbc_cv = bn.cv(bc_data, netnb, loss = "pred", k = 5,
loss.args = list(target="BC"), debug = TRUE)
a=0.12375+0.13225+0.12925+0.12875+0.1385
a
a/5
# library(grid)
# library(Rgraphviz)
# library(gRbase)
# library(gRain)
library(bnlearn)
library(graphics)
data_iris = read.csv("~/Downloads/R/iris.csv")
# ### boxplot###
# boxplot(data$Sepal.Length, main = "Sepal.Length")
# boxplot(data$Sepal.Width, main = "Sepal.Width")
# boxplot(data$Petal.Length, main="Petal.Length")
# boxplot(data$Petal.Width, main="Petal.Width")
data1 = discretize(data_iris[,2:5], method = 'interval', breaks = 7)
data_iris[,2:5] = data1
# #######----------------- hill climbing ---------------------#####
# net1 = hc(data_iris[,2:6])
# graph.par(list(nodes=list(fontsize="25")))
# graphviz.plot(net1, main="Bayesian network for iris dataset using hill climbing algorithm")
# net1_fitted = bn.fit(net1,data_iris[2:6])
# # fitted
# score(net1, data_iris[,2:6])
######---------------- grow shrink -----------------------######
net2 = gs(data_iris[,2:6])
net2_directed = net2
#net2_directed = cextend(net2)
graphviz.plot(net2_directed, main="Bayesian network for iris dataset using grow shrink algorithm")
# net2_fitted = bn.fit(net2_directed,data_iris[2:6])
#score(net2_directed, data_iris[,2:6])
# library(grid)
# library(Rgraphviz)
# library(gRbase)
# library(gRain)
library(bnlearn)
library(graphics)
data_iris = read.csv("~/Downloads/R/iris.csv")
# ### boxplot###
# boxplot(data$Sepal.Length, main = "Sepal.Length")
# boxplot(data$Sepal.Width, main = "Sepal.Width")
# boxplot(data$Petal.Length, main="Petal.Length")
# boxplot(data$Petal.Width, main="Petal.Width")
data1 = discretize(data_iris[,2:5], method = 'interval', breaks = 7)
data_iris[,2:5] = data1
#######----------------- hill climbing ---------------------#####
net1 = hc(data_iris[,2:6])
graph.par(list(nodes=list(fontsize="25")))
graphviz.plot(net1, main="Bayesian network for iris dataset using hill climbing algorithm")
net1_fitted = bn.fit(net1,data_iris[2:6])
score(net1, data_iris[,2:6])
######---------------- grow shrink -----------------------######
net2 = gs(data_iris[,2:6])
net2_directed = cextend(net2)
graphviz.plot(net2_directed, main="Bayesian network for iris dataset using grow shrink algorithm")
net2_fitted = bn.fit(net2_directed,data_iris[2:6])
score(net2_directed, data_iris[,2:6])
# library(grid)
# library(Rgraphviz)
# library(gRbase)
# library(gRain)
library(bnlearn)
#library(graphics)
data_iris = read.csv("~/Downloads/R/iris.csv")
# ### boxplot###
# boxplot(data$Sepal.Length, main = "Sepal.Length")
# boxplot(data$Sepal.Width, main = "Sepal.Width")
# boxplot(data$Petal.Length, main="Petal.Length")
# boxplot(data$Petal.Width, main="Petal.Width")
data1 = discretize(data_iris[,2:5], method = 'interval', breaks = 7)
data_iris[,2:5] = data1
#######----------------- hill climbing ---------------------#####
net1 = hc(data_iris[,2:6])
graph.par(list(nodes=list(fontsize="25")))
graphviz.plot(net1, main="Bayesian network for iris dataset using hill climbing algorithm")
net1_fitted = bn.fit(net1,data_iris[2:6])
score(net1, data_iris[,2:6])
######---------------- grow shrink -----------------------######
net2 = gs(data_iris[,2:6])
net2_directed = cextend(net2)
graphviz.plot(net2_directed, main="Bayesian network for iris dataset using grow shrink algorithm")
net2_fitted = bn.fit(net2_directed,data_iris[2:6])
score(net2_directed, data_iris[,2:6])
# library(grid)
# library(Rgraphviz)
# library(gRbase)
# library(gRain)
library(bnlearn)
#library(graphics)
data_iris = read.csv("~/Downloads/R/iris.csv")
# ### boxplot###
# boxplot(data$Sepal.Length, main = "Sepal.Length")
# boxplot(data$Sepal.Width, main = "Sepal.Width")
# boxplot(data$Petal.Length, main="Petal.Length")
# boxplot(data$Petal.Width, main="Petal.Width")
data1 = discretize(data_iris[,2:5], method = 'interval', breaks = 7)
data_iris[,2:5] = data1
#######----------------- hill climbing ---------------------#####
net1 = hc(data_iris[,2:6])
graph.par(list(nodes=list(fontsize="25")))
graphviz.plot(net1, main="Bayesian network for iris dataset using hill climbing algorithm")
net1_fitted = bn.fit(net1,data_iris[2:6])
score(net1, data_iris[,2:6])
######---------------- grow shrink -----------------------######
net2 = gs(data_iris[,2:6])
net2_directed = cextend(net2)
graphviz.plot(net2_directed, main="Bayesian network for iris dataset using grow shrink algorithm")
net2_fitted = bn.fit(net2_directed,data_iris[2:6])
score(net2_directed, data_iris[,2:6])
library(irace)
svstem.file(package="irace")
find.package('irace')
system.file(package="irace")
vignette("irace-package")
irace(scenario=scenario, parameters=parameters)
checkIraceScenario(scenario=scenario, parameters=parameters)
irace(scenario=scenario, parameters=parameters)
irace
irace()
library("irace")
system.file(package="irace")
irace.cmdline("--help")
irace(scenario = scenario, parameters = parameters)
library("irace")
checkIraceScenario(scenario = scenario, parameters = parameters)
print(parameters)
library("irace")
scenario <- readScenario(filename = "scenario.txt",
scenario = defaultScenario())
system.file(package = "irace")
a
update.packages('irace')
packageVersion('irace')
library("irace", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages(c("backports", "bnlearn", "boot", "caTools", "checkmate", "cluster", "data.table", "digest", "doParallel", "evaluate", "fAsianOptions", "fBasics", "fOptions", "foreach", "foreign", "Formula", "ggplot2", "gRbase", "gridExtra", "gss", "highr", "Hmisc", "htmlTable", "htmlwidgets", "igraph", "irace", "irlba", "iterators", "jsonlite", "knitr", "lazyeval", "MASS", "Matrix", "mgcv", "munsell", "nlme", "NMF", "pkgmaker", "Rcpp", "RcppArmadillo", "RcppEigen", "registry", "reshape2", "rlang", "rngtools", "rpart", "scales", "stringi", "stringr", "survival", "tibble", "timeDate", "timeSeries", "viridis", "viridisLite", "yaml"))
packageVersion('irace')
library("irace")
# Obtain the installation path
system.file(package = "irace")
# Check scenario.txt
scenario <- readScenario(filename = "scenario.txt",
scenario = defaultScenario())
checkIraceScenario(scenario = scenario)
setwd("~/fall2018/irace_minkl/tuning")
# scenario <- readScenario(filename = "scenario.txt",
#                          scenario = defaultScenario())
# irace.main(scenario = scenario)
library(scmamp)
install.packages("Scamp")
install.packages("scmamp")
?data
dat = read.csv("combATable_stac.csv", header = TRUE)
setwd()
dir()
getwd()
getwd()
library(readr)
combATable_stac <- read_csv("~/Documents/fall2018/test3_mipego/get_accuracy_outcome/combATable_stac.csv")
View(combATable_stac)
View(combATable_stac)
combATable_stac
ls()
getwd()
getwd()
getwd()
setwd("~/")
getwd()
setwd("~/Documents/fall2018/test3_mipego/get_accuracy_outcome")
getwd()
combATable_stac
combATable_stac <- read_csv("combATable_stac.csv")
